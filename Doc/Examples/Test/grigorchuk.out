gap> TopElement := function(perm,level)
>   local blocksize,ims,nbar;
>   nbar := List( [1..level], x -> 2 );
>   blocksize := Product(nbar{[2..level]});
>   ims := Concatenation(List( [1,2],
>     i -> [(i^perm-1)*blocksize+1..i^perm*blocksize] ));
>   return PermList(ims);
> end;
function( perm, level ) ... end
gap> SequenceElement := function(seq,level)
>   local blocksize,i,ims,n,nbar,offset,perm,perms;
>   offset := 0;
>   ims := [];
>   nbar := List( [1..level], i -> 2 );
>   blocksize := Product(nbar{[2..level]});
>   for i in [1..level-1] do
>     n := nbar[i+1]; blocksize := blocksize/n;
>     perm := seq[(i -1) mod Length(seq) +1];
>     Append(ims,Concatenation(List( [1..n],
>       i-> offset + [(i^perm-1)*blocksize+1..i^perm*blocksize] ) ));
>     offset := offset + n*blocksize;
>   od;
>   Add(ims,offset+1);
>   return PermList(ims);
> end;
function( seq, level ) ... end
gap> a := level -> TopElement((1,2),level);
function( level ) ... end
gap> b := level -> SequenceElement([(1,2),(1,2),()],level);
function( level ) ... end
gap> c := level -> SequenceElement([(1,2),(),(1,2)],level);
function( level ) ... end
gap> d := level -> SequenceElement([(),(1,2),(1,2)],level);
function( level ) ... end
gap> List( [1..10], i -> Size(Group(b(i),c(i))) );
[ 1, 2, 4, 4, 4, 4, 4, 4, 4, 4 ]
gap> List( [1..10], i -> Group(b(i),c(i)) = Group(b(i),c(i),d(i)) );
[ true, true, true, true, true, true, true, true, true, true ]
gap> G := level -> Group( a(level), b(level), c(level));
function( level ) ... end
gap> List( [1..8], i -> Collected(Factors(Size(G(i)))) );
[ [ [ 2, 1 ] ], [ [ 2, 3 ] ], [ [ 2, 7 ] ], [ [ 2, 12 ] ], [ [ 2, 22 ] ], 
  [ [ 2, 42 ] ], [ [ 2, 82 ] ], [ [ 2, 162 ] ] ]
gap> List( [1..8], i -> NilpotencyClassOfGroup(G(i)) );
[ 1, 2, 4, 8, 16, 32, 64, 128 ]
gap> List( [1..8], i -> DerivedLength(G(i)) );
[ 1, 2, 3, 3, 4, 4, 5, 5 ]
gap> List( [1..5], i -> Exponent(G(i)) );
[ 2, 4, 8, 8, 16 ]
gap> List( [1..5], i -> Length(ConjugacyClasses(G(i))) );
[ 2, 5, 20, 61, 619 ]
gap> classes :=  ConjugacyClasses(G(5));;   
gap> Collected(List( classes, c -> [Order(Representative(c)),Size(c)] ));
[ [ [ 1, 1 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 2, 2 ], 1 ], [ [ 2, 4 ], 3 ], 
  [ [ 2, 8 ], 6 ], [ [ 2, 16 ], 6 ], [ [ 2, 32 ], 9 ], [ [ 2, 64 ], 11 ], 
  [ [ 2, 128 ], 9 ], [ [ 2, 256 ], 16 ], [ [ 2, 512 ], 10 ], 
  [ [ 2, 1024 ], 13 ], [ [ 2, 2048 ], 5 ], [ [ 4, 16 ], 8 ], [ [ 4, 32 ], 8 ],
  [ [ 4, 64 ], 24 ], [ [ 4, 128 ], 29 ], [ [ 4, 256 ], 25 ], 
  [ [ 4, 512 ], 58 ], [ [ 4, 1024 ], 49 ], [ [ 4, 2048 ], 84 ], 
  [ [ 4, 4096 ], 29 ], [ [ 4, 8192 ], 9 ], [ [ 4, 16384 ], 6 ], 
  [ [ 4, 32768 ], 9 ], [ [ 4, 65536 ], 1 ], [ [ 8, 1024 ], 8 ], 
  [ [ 8, 2048 ], 16 ], [ [ 8, 4096 ], 78 ], [ [ 8, 8192 ], 40 ], 
  [ [ 8, 16384 ], 16 ], [ [ 8, 32768 ], 12 ], [ [ 8, 65536 ], 9 ], 
  [ [ 8, 131072 ], 6 ], [ [ 16, 131072 ], 4 ] ]
gap> lower := LowerCentralSeries(G(6));;
gap> List( lower, h -> Size(h) );
[ 4398046511104, 549755813888, 137438953472, 34359738368, 17179869184, 
  4294967296, 1073741824, 536870912, 268435456, 67108864, 16777216, 4194304, 
  1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 
  1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1 ]
gap> List( [1..Length(lower)-1],
> i -> AbelianInvariants(FactorGroup(lower[i],lower[i+1])) );
[ [ 2, 2, 2 ], [ 2, 2 ], [ 2, 2 ], [ 2 ], [ 2, 2 ], [ 2, 2 ], [ 2 ], [ 2 ], 
  [ 2, 2 ], [ 2, 2 ], [ 2, 2 ], [ 2, 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], 
  [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], 
  [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ] ]
gap> upper := UpperCentralSeries(G(6));;                    
gap> List( upper, h -> Size(h) );                              
[ 4398046511104, 549755813888, 137438953472, 68719476736, 17179869184, 
  8589934592, 4294967296, 1073741824, 268435456, 134217728, 67108864, 
  33554432, 16777216, 4194304, 1048576, 262144, 65536, 32768, 16384, 8192, 
  4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1 ]
gap> List( [1..Length(upper)-1],                               
> i -> AbelianInvariants(FactorGroup(upper[i],upper[i+1])) );
[ [ 2, 2, 2 ], [ 2, 2 ], [ 2 ], [ 2, 2 ], [ 2 ], [ 2 ], [ 2, 2 ], [ 2, 2 ], 
  [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2, 2 ], [ 2, 2 ], [ 2, 2 ], [ 2, 2 ], [ 2 ], 
  [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], 
  [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ] ]
gap> List(List( [1..6], i ->    
> LowerCentralSeries(G(i)) = UpperCentralSeries(G(i)) ));
[ true, true, true, false, false, false ]
gap> grigs := List( [1..6], i -> G(i) );;
gap> list := List( grigs, g -> NormalSubgroups(g) );;
gap> List( list, n -> Length(n) );
[ 2, 6, 28, 41, 77, 227 ]
gap> for normals in list do
> Print(Collected(List( normals, h -> Size(h) )),"\n");
> od;
[ [ 1, 1 ], [ 2, 1 ] ]
[ [ 1, 1 ], [ 2, 1 ], [ 4, 3 ], [ 8, 1 ] ]
[ [ 1, 1 ], [ 2, 1 ], [ 4, 1 ], [ 8, 3 ], [ 16, 7 ], [ 32, 7 ], [ 64, 7 ], 
  [ 128, 1 ] ]
[ [ 1, 1 ], [ 2, 1 ], [ 4, 1 ], [ 8, 1 ], [ 16, 1 ], [ 32, 3 ], [ 64, 3 ], 
  [ 128, 3 ], [ 256, 5 ], [ 512, 7 ], [ 1024, 7 ], [ 2048, 7 ], [ 4096, 1 ] ]
[ [ 1, 1 ], [ 2, 1 ], [ 4, 1 ], [ 8, 1 ], [ 16, 1 ], [ 32, 1 ], [ 64, 1 ], 
  [ 128, 1 ], [ 256, 1 ], [ 512, 3 ], [ 1024, 7 ], [ 2048, 5 ], [ 4096, 7 ], 
  [ 8192, 5 ], [ 16384, 5 ], [ 32768, 3 ], [ 65536, 3 ], [ 131072, 3 ], 
  [ 262144, 5 ], [ 524288, 7 ], [ 1048576, 7 ], [ 2097152, 7 ], 
  [ 4194304, 1 ] ]
[ [ 1, 1 ], [ 2, 1 ], [ 4, 1 ], [ 8, 1 ], [ 16, 1 ], [ 32, 1 ], [ 64, 1 ], 
  [ 128, 1 ], [ 256, 1 ], [ 512, 1 ], [ 1024, 1 ], [ 2048, 1 ], [ 4096, 1 ], 
  [ 8192, 1 ], [ 16384, 1 ], [ 32768, 1 ], [ 65536, 1 ], [ 131072, 3 ], 
  [ 262144, 7 ], [ 524288, 9 ], [ 1048576, 19 ], [ 2097152, 11 ], 
  [ 4194304, 13 ], [ 8388608, 11 ], [ 16777216, 19 ], [ 33554432, 11 ], 
  [ 67108864, 13 ], [ 134217728, 9 ], [ 268435456, 13 ], [ 536870912, 7 ], 
  [ 1073741824, 7 ], [ 2147483648, 5 ], [ 4294967296, 7 ], [ 8589934592, 5 ], 
  [ 17179869184, 5 ], [ 34359738368, 3 ], [ 68719476736, 3 ], 
  [ 137438953472, 3 ], [ 274877906944, 5 ], [ 549755813888, 7 ], 
  [ 1099511627776, 7 ], [ 2199023255552, 7 ], [ 4398046511104, 1 ] ]
gap> LoadPackage("autpgrp");
true
gap> for g in grigs do
> ConvertHybridAutGroup(AutomorphismGroupPGroup(g));
> Print(Collected(List( NormalSubgroups(g),
> h -> IsCharacteristicSubgroup(g,h)) ), "\n");
> od;
[ [ true, 2 ] ]
[ [ true, 4 ], [ false, 2 ] ]
[ [ true, 14 ], [ false, 14 ] ]
[ [ true, 25 ], [ false, 16 ] ]
[ [ true, 77 ] ]
[ [ true, 227 ] ]
gap> for i in [2..5] do
> Print( AbelianInvariantsMultiplier(grigs[i]), "\n");
> od;
[ 2 ]
[ 2, 2, 2, 2 ]
[ 2, 2, 2, 2, 2, 2 ]
[ 2, 2, 2, 2, 2, 2, 2, 2 ]
gap> quit;
